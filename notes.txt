

?!??!?!? class vs instance vars instead of before each/all?

describe Post do
  before(:all) do
    @author = User.make
  end
  
  before(:each) do
    @post = Post.make_unsaved(:author => @author)
  end
  
  it "saves successfully" do
    @post.save.should be
  end
  
  it "can be reported" do
    @post.save
    @post.report.should be
  end  
end

class PostTest < ActiveSupport::TestCase
  def self.startup
    @@author = User.make
  end

  def setup
    @post = Post.make_unsaved(:author => @@author)
  end

  test "saves successfully" do
    assert @post.save
  end

  test "can be reported" do
    @post.save
    assert @post.report
  end

  # ...
end


?!?!?! shared_examples_for vs including a module

shared_examples_for "something removable" do
end

describe Post do
  before(:each) do
    @post = @model = Post.make_unsaved
  end
  
  it_behaves_like "something removable"
end



module RemovableTests
  def test_sets_removed_at_attribute
    @model.remove
    assert @model.removed_at
  end
end

class PostTest < ActiveSupport::TestCase
  include RemovableTests

  def setup
    @post = @model = Post.make_unsaved
  end

  # ...
end



I. DHH
   A. Readability: "RSpec removes readability"
      "something.should be_true" sums it up the aesthetic argument for me pretty well. That call hurts my eyes vs "assert something".
      1. assert vs should
      2. 1 assertion per test
      3. Nested contexts vs test classes
      4. shared_examples_for vs modules
   B. Frameworks shape what we do
      Which encourages newbs to write better tests?
   C. Added complexity should be worth it
   
II. Differences in Features
   A. rspec-rails request specs + js
   B. Documentation
   C. Failure output
   D. Other
    